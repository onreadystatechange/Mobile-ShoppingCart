思考：我们localstrorage用在哪里，作用是什么，有什么意义
      为了减少请求数量，统一提交一次，频繁的添加、修改的操作，基于本地。

1.  添加到购物车：
    点击某商品的“加入购物车”，我们是希望将当前商品添加到本地购物车里，注意，是本地购物车里；
    a. 知道当前商品的id等信息
    b. 看一下原本本地购物车里的商品列表里，有没有我要添加的这一条(通过goodsId对比)
        1).如果有：则在原本的数量基础上加1就好了
        2).如果没有：则需要在原本的购物车的商品列表里追加一条商品
    c. 我们在做以上操作时，要注意，我们存储在localStorage里的购物车的格式是怎样的：
       ("cart","{updateTime: "", goodsList:[]}")
2.  有一个时间点（这个时间点，是产品经理来定的），
    （
    //比如离开页面的时候，去同步；
    或者设定一个时间间隔setInterval，
    定时检查本地的购物车数据是否有改动，
    如果有改动则同步
    ）
    需要我们去把本地购物车里的信息全部同步到服务器端购物车数据库里去。
    这样的意义是，我们在不同的设备上，用同一个账号登录进去的时候，
    能够操作统一的一套购物车数据。
3.  还要有一个时间点——在进入页面的时候，
    我们需要对比服务器端和本地端的购物车数据，
    哪一套数据的更新时间更晚，哪套数据是最新的，就维护这套数据到本地购物车里。
    这样做能够保证，本地的，注意，是本地的购物车数据，始终是最新的。
4.  管理购物车：
    a. 显示购物车数据：
        （进入页面的时候，我们已经能够保证本地的购物车数据是最新的了，因为第3条）
        需要把本地购物车的数据拿出来，列到页面中，就好了。
    b. 操作（添加、减少、删除、清空）购物车数据：
        基于本地的购物车数据做的操作
        添加和减少商品数量的时候，我们需要注意，数量的操作需要有一个范围（比如0~100）
        删除商品数量的时候，我们要注意，看人家后端同学给我们提供的接口是什么样儿的。
        （目前本次练习里的接口：只能逐条操作，如果要删除，需要把数量改为0）
        清空的时候，也需要根据接口来操作。
    c. 以上的管理，都是基于本地的操作，需要有一个时间点同步，如上面第2条的处理一样。
        
    
5. 本地的购物车里存储的信息：
cart
{
    updateTime: "",
    goodsList: [{
            id: "",
            name: "",
            img: "",
            price: "",
            count: ""
        },{
            id: "",
            name: "",
            img: "",
            price: "",
            count: ""
        }]
}

    
    
    
    
    
    
    